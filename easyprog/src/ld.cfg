FEATURES {
    STARTADDRESS: default = $0801;
}
SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
}

# C stack starts at the end of HIRAM (see crt0.s), it grows
# downwards. We don't use a heap at the moment.

MEMORY {
    ZP:             file = "", define = yes, start = $0002, size = $001A;
    LOADADDR:       file = %O,               start = $07FF, size = $0002;
    LORAM:          file = %O, define = yes, start = $0801, size = $07FF, fill = yes;
    MAIN:           file = %O, define = yes, start = $1000, size = $A000;
    EXOBUFFER:      file = "", define = yes, start = $B000, size = $1000;
    EAPI:           file = "", define = yes, start = $C000, size = $0400;
    HIRAM:          file = "", define = yes, start = $C400, size = $0A00;
    BLOCK_BUFFER:   file = "", define = yes, start = $CE00, size = $0100;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = LORAM,    type = ro;
    STARTUP:  load = LORAM,    type = ro;
    LOWCODE:  load = LORAM,    type = ro,  optional = yes;
    SPRITES:  load = LORAM,    type = ro,  align = $40;
    CODE:     load = MAIN,     type = ro,  align = $20;
    RODATA:   load = MAIN,     type = ro,  align = $100;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = rw;
    ONCE:     load = MAIN,     type = ro,  define   = yes;
    BSS:      load = MAIN,     type = bss, define   = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
